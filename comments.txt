<template>
  <ul>
    <li v-for="folder in folders" :key="folder.path">
      <div @click="toggleExpand(folder)">
        <!-- Show expand/collapse icon based on the folder's state -->
        <span>{{ isExpanded(folder) ? '-' : '+' }}</span>
        <input
          type="checkbox"
          :checked="isSelected(folder)"
          @change="toggleSelection(folder)"
        />
        {{ folder.name }}
      </div>
      <!-- Recursively render child folders if the folder is expanded -->
      <FolderTree
        v-if="isExpanded(folder) && folder.children && folder.children.length > 0"
        :folders="folder.children"
        :selectedFolders="selectedFolders"
        :expandedFolders="expandedFolders"
        @update:selected="updateSelected"
        @update:expanded="updateExpanded"
      />
    </li>
  </ul>
</template>

<script>
export default {
  name: "FolderTree",
  props: {
    folders: Array,
    selectedFolders: Set,
    expandedFolders: Set // Pass the Set of expanded folder paths from the parent component
  },
  methods: {
    toggleSelection(folder) {
      const isSelected = this.selectedFolders.has(folder.path);
      if (isSelected) {
        this.selectedFolders.delete(folder.path);
      } else {
        this.selectedFolders.add(folder.path);
      }
      this.$emit('update:selected', new Set(this.selectedFolders));
    },
    isSelected(folder) {
      return this.selectedFolders.has(folder.path);
    },
    toggleExpand(folder) {
      const isExpanded = this.expandedFolders.has(folder.path);
      if (isExpanded) {
        this.expandedFolders.delete(folder.path);
      } else {
        this.expandedFolders.add(folder.path);
      }
      this.$emit('update:expanded', new Set(this.expandedFolders));
    },
    isExpanded(folder) {
      return this.expandedFolders.has(folder.path);
    },
    updateSelected(selectedFolders) {
      this.$emit('update:selected', selectedFolders);
    },
    updateExpanded(expandedFolders) {
      this.$emit('update:expanded', expandedFolders);
    }
  }
};
</script>





<template>
  <div>
    <h3>Select Folders</h3>
    <FolderTree
      :folders="folderTree"
      :selectedFolders="selectedFolders"
      :expandedFolders="expandedFolders"
      @update:selected="onFolderSelected"
      @update:expanded="onFolderExpanded"
    />
  </div>
</template>

<script>
import FolderTree from './components/FolderTree.vue';
import { buildFolderTree } from './utils/folderUtils';

export default {
  name: 'FolderDialog',
  components: { FolderTree },
  data() {
    return {
      folders: [/* your folder array */],
      folderTree: [],
      selectedFolders: new Set(),
      expandedFolders: new Set() // Track which folders are expanded
    };
  },
  created() {
    this.folderTree = buildFolderTree(this.folders);
  },
  methods: {
    onFolderSelected(selectedFolders) {
      this.selectedFolders = selectedFolders;
    },
    onFolderExpanded(expandedFolders) {
      this.expandedFolders = expandedFolders; // Update expanded folders state
    }
  }
};
</script>
